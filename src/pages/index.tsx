import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Header } from "@/components";
import { Button, Heading, TextField } from "@/components/ui";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { DevTool } from "@hookform/devtools";
import { zodResolver } from "@hookform/resolvers/zod";
import { ChevronRight } from "lucide-react";

interface FormFieldsType {
  email: string;
}

const schema = z.object({
  email: z.string().nonempty("This field is required").email(),
});

const Home: NextPage = () => {
  async function onSubmit(data: FormFieldsType) {
    await new Promise((resolve) => setTimeout(resolve, 2000));
    console.log(data);
  }
  const {
    register,
    control,
    formState: { errors, touchedFields, isSubmitted, isSubmitting },
    handleSubmit,
  } = useForm<FormFieldsType>({
    mode: "onChange",
    resolver: zodResolver(schema),
    defaultValues: {
      email: "",
    },
  });
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/images/favicon.ico" />
      </Head>
      <main className="relative h-[55vh] lg:h-[60vh]">
        <div className="p relative z-10 h-full border-b-8 border-zinc-800 bg-black/50 bg-gradient-to-b from-black/70 via-transparent to-black/60">
          <Header className="absolute inset-x-0 top-0 z-50" />
          <div className="container flex h-full flex-col items-center justify-end pb-8 md:pb-16 lg:justify-center lg:gap-4 lg:pt-24 lg:pb-0">
            <Heading size="large" className="mb-2 text-[2rem] leading-tight md:text-[2rem] lg:mb-0">
              Unlimited movies, TV shows, and more.
            </Heading>
            <p className="mb-4 text-center text-lg lg:mb-2 lg:text-2xl">Watch anywhere. Cancel anytime.</p>
            <p className="mb-3 px-4 text-center text-lg lg:mb-0 lg:text-xl">
              Ready to watch? Enter your email to create or restart your membership.
            </p>
            {/* eslint-disable-next-line @typescript-eslint/no-misused-promises */}
            <form
              className="flex flex-col items-center gap-4 md:flex-row md:items-start"
              onSubmit={handleSubmit(onSubmit)}
              noValidate
            >
              <TextField
                className="min-w-[70vw] md:min-w-[50vw] lg:min-w-[30vw]"
                placeholder="Email address"
                hasError={!!((touchedFields.email || isSubmitted) && errors.email)}
                error={errors.email?.message}
                {...register("email")}
              />
              <Button isLoading={isSubmitting} variant="primary" size="large" type="submit" className="px-4 md:px-6">
                <span>Get Started</span>
                <ChevronRight className="ml-2 h-4 w-4" />
              </Button>
            </form>
          </div>
        </div>

        <Image
          src="/images/hero.jpg"
          alt="Hero image"
          fill
          priority
          className="pointer-events-none absolute inset-0 select-none object-cover object-center"
        />
      </main>
      <DevTool control={control} /> {/* set up the dev tool */}
    </>
  );
};

export default Home;
